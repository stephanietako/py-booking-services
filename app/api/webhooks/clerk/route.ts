// app/api/webhooks/clerk/route.ts - Version debug
import { NextRequest, NextResponse } from "next/server";
import { verifyClerkWebhook } from "@/lib/clerk";
import { PrismaClient } from "@prisma/client";
import { addUserToDatabase } from "@/actions/actions";
import { ClerkWebhookEvent } from "@/types";

const prisma = new PrismaClient();
const CLERK_WEBHOOK_SECRET = process.env.CLERK_WEBHOOK_SECRET!;

export async function POST(req: NextRequest) {
  try {
    // Test de connexion Prisma
    console.log("üîå Test connexion Prisma...");
    await prisma.$connect();
    console.log("‚úÖ Prisma connect√©");

    const { event } = await verifyClerkWebhook(req, CLERK_WEBHOOK_SECRET);
    const { type, data } = event as ClerkWebhookEvent;

    switch (type) {
      case "user.created":
      case "user.updated":
        console.log("üîÑ D√©but cr√©ation/mise √† jour user...");

        // V√©rification des donn√©es re√ßues
        const emailData = data.email_addresses?.[0];

        if (!emailData?.email_address) {
          throw new Error(
            "Aucune adresse email trouv√©e dans les donn√©es Clerk"
          );
        }

        const email = emailData.email_address;
        const name =
          `${data.first_name ?? ""} ${data.last_name ?? ""}`.trim() ||
          "Sans nom";
        const imageUrl = data.image_url ?? "";
        const clerkUserId = data.id;

        // V√©rifier que le r√¥le existe
        console.log("üîç Recherche du r√¥le 'user'...");
        const defaultRole = await prisma.role.findFirst({
          where: { name: "user" },
        });

        if (!defaultRole) {
          console.error("‚ùå R√¥le 'user' introuvable !");

          // Cr√©er le r√¥le si il n'existe pas
          console.log("üîß Cr√©ation du r√¥le 'user'...");
          const newRole = await prisma.role.create({
            data: { name: "user" },
          });
          console.log("‚úÖ R√¥le cr√©√©:", newRole);
        }

        // V√©rifier si l'utilisateur existe d√©j√†
        console.log("üîç V√©rification utilisateur existant...");
        const existingUser = await prisma.user.findUnique({
          where: { clerkUserId },
        });
        console.log("üë§ Utilisateur existant:", existingUser ? "OUI" : "NON");

        // V√©rifier si l'email existe d√©j√†
        const existingEmailUser = await prisma.user.findUnique({
          where: { email },
        });
        console.log("üìß Email existant:", existingEmailUser ? "OUI" : "NON");

        const result = await addUserToDatabase(
          email,
          name,
          imageUrl,
          clerkUserId,
          ""
        );

        console.log("‚úÖ addUserToDatabase result:", result);

        // Double v√©rification en base
        const userInDb = await prisma.user.findUnique({
          where: { clerkUserId },
          include: { role: true },
        });

        if (!userInDb) {
          console.error("‚ùå PROBL√àME: User non trouv√© en base apr√®s cr√©ation!");

          // Essayer de cr√©er directement
          console.log("üîß Tentative de cr√©ation directe...");
          await prisma.user.create({
            data: {
              email,
              name,
              image: imageUrl,
              clerkUserId,
              phoneNumber: "",
              roleId:
                defaultRole?.id ||
                (await prisma.role.findFirst({ where: { name: "user" } }))!.id,
            },
            include: { role: true },
          });
        }

        break;

      case "user.deleted":
        console.log("üóëÔ∏è Suppression user");
        await prisma.user.deleteMany({
          where: { clerkUserId: data.id },
        });
        console.log("üóëÔ∏è Users supprim√©s");
        break;

      default:
        console.log("üîï Unhandled Clerk event:", type);
    }

    return NextResponse.json({ success: true }, { status: 200 });
  } catch (err) {
    console.error("‚ùå Clerk webhook error:", err);
    console.error("‚ùå Error details:", {
      message: err instanceof Error ? err.message : "Unknown error",
      stack: err instanceof Error ? err.stack : "No stack",
      name: err instanceof Error ? err.name : "Unknown",
    });

    return NextResponse.json(
      {
        error: "Webhook error",
        details: err instanceof Error ? err.message : "Unknown error",
      },
      { status: 400 }
    );
  } finally {
    await prisma.$disconnect();
  }
}
