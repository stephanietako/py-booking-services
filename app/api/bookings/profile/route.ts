// app/api/bookings/profile/route.ts
// app/api/bookings/profile/route.ts
import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { auth, currentUser } from "@clerk/nextjs/server";
import { PrismaClientKnownRequestError } from "@prisma/client/runtime/library";

export async function GET() {
  const { userId: clerkUserId } = await auth();

  if (!clerkUserId) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  console.log("üîç ClerkUserId:", clerkUserId);

  try {
    // R√©cup√©rer l'utilisateur interne √† partir du clerkUserId
    let user = await prisma.user.findUnique({
      where: { clerkUserId },
    });

    // Si l'utilisateur n'existe pas, g√©rer la cr√©ation/mise √† jour
    if (!user) {
      console.log(
        "‚ö†Ô∏è Utilisateur non trouv√© par clerkUserId, v√©rification par email..."
      );

      // R√©cup√©rer les infos depuis Clerk
      const clerkUser = await currentUser();

      if (!clerkUser) {
        return NextResponse.json(
          { error: "Impossible de r√©cup√©rer l'utilisateur Clerk" },
          { status: 404 }
        );
      }

      const userEmail = clerkUser.emailAddresses[0]?.emailAddress;

      if (!userEmail) {
        return NextResponse.json(
          { error: "Email non trouv√© dans Clerk" },
          { status: 404 }
        );
      }

      // V√©rifier si un utilisateur existe d√©j√† avec cet email
      const existingUser = await prisma.user.findUnique({
        where: { email: userEmail },
      });

      if (existingUser) {
        // Mettre √† jour le clerkUserId de l'utilisateur existant
        console.log(
          "‚úÖ Utilisateur trouv√© par email, mise √† jour du clerkUserId..."
        );
        user = await prisma.user.update({
          where: { id: existingUser.id },
          data: { clerkUserId },
        });
      } else {
        // Cr√©er un nouvel utilisateur seulement si aucun n'existe avec cet email
        console.log("‚ö†Ô∏è Cr√©ation d'un nouvel utilisateur...");

        try {
          // R√©cup√©rer le r√¥le par d√©faut
          const defaultRole = await prisma.role.findFirst({
            where: { name: "user" },
          });

          if (!defaultRole) {
            console.error("‚ùå R√¥le par d√©faut 'user' non trouv√©");
            return NextResponse.json(
              { error: "Configuration du syst√®me incorrecte" },
              { status: 500 }
            );
          }

          // Construire le nom complet avec v√©rification
          const firstName = clerkUser.firstName || "";
          const lastName = clerkUser.lastName || "";
          const fullName = `${firstName} ${lastName}`.trim() || "Utilisateur";

          user = await prisma.user.create({
            data: {
              clerkUserId,
              name: fullName,
              email: userEmail,
              roleId: defaultRole.id,
            },
          });

          console.log("‚úÖ Utilisateur cr√©√©:", user.id);
        } catch (createError) {
          // Si l'erreur est une contrainte unique sur l'email
          if (
            createError instanceof PrismaClientKnownRequestError &&
            createError.code === "P2002" &&
            Array.isArray(createError.meta?.target) &&
            createError.meta.target.includes("email")
          ) {
            console.log("‚ö†Ô∏è Email d√©j√† utilis√©, tentative de r√©cup√©ration...");

            // R√©cup√©rer l'utilisateur existant par email
            const existingUserByEmail = await prisma.user.findUnique({
              where: { email: userEmail },
            });

            if (existingUserByEmail) {
              // Mettre √† jour le clerkUserId
              user = await prisma.user.update({
                where: { id: existingUserByEmail.id },
                data: { clerkUserId },
              });
              console.log(
                "‚úÖ ClerkUserId mis √† jour pour l'utilisateur existant"
              );
            } else {
              throw createError;
            }
          } else {
            throw createError;
          }
        }
      }
    }

    if (!user) {
      return NextResponse.json(
        { error: "Impossible de cr√©er ou r√©cup√©rer l'utilisateur" },
        { status: 500 }
      );
    }

    console.log("‚úÖ Utilisateur trouv√©:", user.id);

    const bookings = await prisma.booking.findMany({
      where: {
        userId: user.id,
      },
      orderBy: { reservedAt: "desc" },
      include: {
        service: true,
        bookingOptions: { include: { option: true } },
        client: true,
      },
    });

    console.log("‚úÖ Bookings trouv√©s:", bookings.length);
    return NextResponse.json(bookings);
  } catch (error) {
    console.error("‚ùå Erreur dans GET bookings/profile:", error);
    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 });
  }
}
