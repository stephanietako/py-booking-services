"use server";

import { stripe } from "@/lib/stripe";
import { prisma } from "@/lib/prisma";

// Fonction pour cr√©er une session Stripe avec un prix dynamique bas√© sur un service sp√©cifique
export const getStripeSession = async ({
  serviceId,
  domainUrl,
  customerId,
}: {
  serviceId: string;
  domainUrl: string;
  customerId: string;
}) => {
  // R√©cup√©rer les d√©tails du service depuis la base de donn√©es (prix, devise, etc.)
  const service = await getServicePriceWithName(serviceId);

  // Si le service n'existe pas ou n'a pas de prix, renvoyer une erreur
  if (!service) {
    throw new Error("Service non trouv√©");
  }

  // Cr√©e une session Stripe avec un prix dynamique bas√© sur le service
  const session = await stripe.checkout.sessions.create({
    mode: "payment",
    billing_address_collection: "auto",
    line_items: [
      {
        price_data: {
          currency: service.currency, // Devise du service
          product_data: {
            name: `Service: ${service.name}`, // Utilise le nom du service
          },
          unit_amount: service.price * 100, // Conversion en centimes
        },
        quantity: 1, // Quantit√©, ici 1 pour un paiement unique
      },
    ],
    payment_method_types: ["card"],
    customer: customerId,
    customer_update: {
      address: "auto",
      name: "auto",
    },
    success_url: `${domainUrl}/dashboard/payment/success`,
    cancel_url: `${domainUrl}/dashboard/payment/cancel`,
  });

  return session.url as string;
};

// Fonction pour r√©cup√©rer les donn√©es Stripe d'un utilisateur
export const getDataStripeUser = async (clerkUserId: string) => {
  const user = await prisma.user.findUnique({
    where: {
      clerkUserId: clerkUserId,
    },
    select: {
      stripeCustomerId: true,
    },
  });

  if (!user) {
    throw new Error("Utilisateur non trouv√©");
  }

  return user;
};

// Fonction pour cr√©er une session du portail Stripe
export async function createStripePortalSession(
  stripeCustomerId: string,
  domainUrl: string,
  bookingId: string // ID de la r√©servation
) {
  try {
    const user = await prisma.user.findUnique({
      where: { stripeCustomerId: stripeCustomerId }, // üëà Cherche bien par Stripe ID
      select: { stripeCustomerId: true },
    });

    if (!user?.stripeCustomerId) {
      throw new Error("Utilisateur non trouv√© ou pas de stripeCustomerId");
    }

    // Cr√©e une session du portail Stripe avec une URL de redirection personnalis√©e
    const session = await stripe.billingPortal.sessions.create({
      customer: user.stripeCustomerId,
      return_url: `${domainUrl}/manage-booking/${bookingId}`,
    });

    return session.url;
  } catch {
    console.error("‚ÑπÔ∏è Une erreur s'est produite lors du traitement.");

    throw new Error("Impossible de cr√©er la session du portail Stripe.");
  }
}

// Fonction pour cr√©er une session de paiement Stripe Checkout
export const createStripeCheckoutSession = async (
  customerId: string,
  amount: number, // Montant de la r√©servation
  currency: string,
  serviceName: string, // Nom du service
  domainUrl: string, // URL du domaine
  bookingId: string // ID de la r√©servation pour les m√©tadonn√©es
) => {
  try {
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ["card"],
      line_items: [
        {
          price_data: {
            currency: currency,
            product_data: {
              name: serviceName, // Nom de la r√©servation ou service
            },
            unit_amount: amount * 100, // Montant en centimes
          },
          quantity: 1,
        },
      ],
      mode: "payment", // Mode de paiement
      customer: customerId, // Le client Stripe
      metadata: {
        bookingId: String(bookingId), // üî• Conversion explicite en string
      },
      success_url: `${domainUrl}/dashboard/payment/success`, // URL apr√®s paiement r√©ussi
      cancel_url: `${domainUrl}/dashboard/payment/cancel`, // URL apr√®s annulation
    });

    return session.url; // L'URL de la session de paiement
  } catch {
    throw new Error("Erreur lors de la cr√©ation de la session Stripe Checkout");
  }
};

// Mise √† jour du statut apr√®s un paiement r√©ussi via Stripe
export async function updateBookingStatusToPaid(bookingId: string) {
  try {
    // Mettre √† jour le statut de la r√©servation √† "PAID"
    const updatedBooking = await prisma.booking.update({
      where: { id: bookingId },
      data: {
        status: "PAID",
      },
    });
    return updatedBooking;
  } catch {
    console.log("Erreur lors de la mise √† jour du statut √† PAID ");
    throw new Error("Impossible de mettre √† jour le statut √† PAID.");
  }
}

// Fonction pour r√©cup√©rer le prix et la devise d'un service
export const getServicePriceWithName = async (serviceId: string) => {
  const service = await prisma.service.findUnique({
    where: { id: serviceId },
    select: { price: true, currency: true, name: true },
  });

  if (!service) {
    throw new Error("Service non trouv√©");
  }

  return service;
};
