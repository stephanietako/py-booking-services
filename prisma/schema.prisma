generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Client {
  id          Int       @id @default(autoincrement())
  fullName    String
  email       String    @unique
  phoneNumber String
  bookings    Booking[] @relation("ClientBookings")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Booking {
  id                Int             @id @default(autoincrement())
  clientId          Int?
  client            Client?         @relation("ClientBookings", fields: [clientId], references: [id])
  userId            String?
  user              User?           @relation("UserBookings", fields: [userId], references: [id])
  status            BookingStatus   @default(PENDING)
  approvedByAdmin   Boolean         @default(false)
  reservedAt        DateTime
  startTime         DateTime
  endTime           DateTime
  withCaptain       Boolean         @default(false)
  boatAmount        Float // prix du bateau uniquement
  payableOnBoard    Float           @default(0) // options à payer à bord
  totalAmount       Float           @default(0)
  stripePaymentLink String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime
  expiresAt         DateTime
  bookingOptions    BookingOption[]
  transactions      Transaction[]
  Service           Service?        @relation(fields: [serviceId], references: [id])
  serviceId         String?
  paymentStatus     PaymentStatus   @default(PENDING)
}

model Option {
  id             String          @id @default(uuid())
  label          String
  name           String
  amount         Float
  payableOnline  Boolean         @default(false)
  serviceId      String?
  Service        Service?        @relation(fields: [serviceId], references: [id])
  createdAt      DateTime        @default(now())
  bookingOptions BookingOption[]
}

model BookingOption {
  id        String  @id @default(uuid())
  bookingId Int
  optionId  String
  quantity  Int     @default(1)
  unitPrice Float
  label     String
  booking   Booking @relation(fields: [bookingId], references: [id])
  option    Option  @relation(fields: [optionId], references: [id])
}

model Transaction {
  id            String        @id @default(uuid())
  description   String
  amount        Float
  createdAt     DateTime      @default(now())
  bookingId     Int?
  booking       Booking?      @relation(fields: [bookingId], references: [id])
  paymentStatus PaymentStatus @default(PENDING)
}

model Service {
  id               String        @id @default(uuid())
  name             String        @unique
  amount           Float
  categories       String[]
  description      String?
  imageUrl         String
  active           Boolean       @default(true)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  reservedAt       DateTime?
  startTime        DateTime?
  endTime          DateTime?
  options          Option[]
  bookings         Booking[]
  defaultPrice     Float
  isFixed          Boolean       @default(false)
  pricingRules     PricingRule[]
  price            Float
  currency         String
  stripeCustomerId String?
}

model PricingRule {
  id        String   @id @default(uuid())
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])
  startDate DateTime
  endDate   DateTime
  price     Float

  @@unique([serviceId, startDate, endDate])
}

model Day {
  id        String @id @default(cuid())
  name      String
  dayOfWeek Int    @unique
  openTime  String
  closeTime String
}

model ClosedDay {
  id   String   @id @default(cuid())
  date DateTime @unique
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  name             String
  image            String?
  description      String?
  clerkUserId      String    @unique
  roleId           String
  role             Role      @relation(fields: [roleId], references: [id])
  bookings         Booking[] @relation("UserBookings")
  createdAt        DateTime  @default(now())
  stripeCustomerId String?   @unique
}

model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[]
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}
